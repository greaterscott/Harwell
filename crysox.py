# crysox: A python library for interacting with the Crysol and
# Cryson packages from the ATSAS suite written within the group
# of Dmitri Svergun at EMBL-Hamburg
#
# Public Domain Waiver:
# To the extent possible under law, Cameron Neylon has waived all 
# copyright and related or neighboring rights to lablogpost.py
# This work is published from United Kingdom.
#
# See http://creativecommons.org/publicdomain/zero/1.0/
#
################################################################
#
# Dependencies:
#
# The library requires.....

def parseLogFile(filename):
    """Parse the logfile generated by Cryson"""

    try:
        f = open(filename)
    except IOError:
        warnings.warn("Couldn't find filename", Warning)
        return

    logfile = f.readlines()
    params = {}
    valstr = ''
    val = None

    paramlist = [
        ['max_order_harmonics', 7, 60, 5, 'int'],
        ['order_fib_grid', 8, 60, 5, 'int'],
        ['tot_num_dir', 9, 60, 5, 'int'],
        ['max_angle', 14, 60, 7, 'float'],
        ['num_points', 15, 60, 4, 'int'],
       # ['chain_deuteration', 16, 60, 5, 'float'],
       # ['d2o_fraction', 21, 60, 5, 'float'],
       # ['pdb_filename', 21, 60, 20, 'str'],
       # ['num_atoms', 22, 60, 7, 'int'],
       # ['centre_x', 23, 20, 7, 'float'],
       # ['centre_y', 23, 29, 7, 'float'],
       # ['centre_z', 23, 38, 7, 'float'],
        ['atomic_rg', 29, 18, 8, 'float'],
        ['envelope_rg', 29, 52, 8, 'float'],
        ['shape_rg', 30, 18, 12, 'float'],
       # ['envelope_vol', 25, 52, 12, 'float'],
       # ['shell_vol', 26, 18, 12, 'float'],
       # ['envelope_surf', 26, 52, 12, 'float'],
       # ['shell_rg', 27, 18, 12, 'float'],
       # ['envelope_rad', 27, 52, 12, 'float'],
       # ['shell_width', 28, 18, 12, 'float'],
       # ['envelope_diam', 28, 52, 12, 'float'],
       # ['mol_wt', 29, 18, 12, 'float'],
       # ['dry_vol', 29, 52, 12, 'float'],
       # ['disp_vol', 30, 18, 12, 'float'],
       # ['avg_atomic_rad', 30, 52, 12, 'float'],
       # ['solvent_sld', 31, 18, 12, 'float'],
        ['particle_cont', 36, 52, 12, 'float'],
       # ['num_residuals', 32, 35, 45, 'int'],
       # ['solv_shell_cont', 36, 60, 8, 'float'],
       # ['excluded_vol', 38, 60, 12, 'float'],
        ['rg', 49, 60, 7, 'float'],
                  ]

    # Collect the run parameters
    for param in paramlist:

        dictkey = param[0]
        line = param[1]
        pos = param[2]
        len = param[3]
        type = param[4]

        valstr = logfile[line][pos:pos+len]
        print valstr
        if type == 'int':
            val = int(valstr)
        elif type == 'float':
            val = float(valstr)
        elif type == 'str':
            val = valstr.strip()
        else:
            pass

        params[dictkey] = val

    return params

if __name__ == '__main__':
    test = parseLogFile('test.log')
    print test



        

